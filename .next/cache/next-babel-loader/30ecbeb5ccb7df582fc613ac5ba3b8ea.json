{"ast":null,"code":"import mongoose from \"mongoose\";\nimport jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nimport connectDb from \"../../utils/connectDb\";\nconst {\n  ObjectId\n} = mongoose.Types;\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Mthod ${req.method} is not allowed`);\n  }\n});\n\nasync function handleDeleteRequest(req, res) {\n  const {\n    productId\n  } = req.query;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOneAndUpdate({\n      user: userId\n    }, {\n      $pull: {\n        products: {\n          product: productId\n        }\n      }\n    }, {\n      new: true\n    }).populate({\n      path: 'products.product',\n      model: 'Product'\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}\n\n;\n\nasync function handlePutRequest(req, res) {\n  const {\n    quantity,\n    productId\n  } = req.body;\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }); // Check if product already exists in cart\n\n    const productExists = cart.products.some(doc => ObjectId(productId).equals(doc.product));\n\n    if (productExists) {\n      await Cart.findOneAndUpdate({\n        _id: cart._id,\n        \"products.product\": productId\n      }, {\n        $inc: {\n          \"products.$.quantity\": quantity\n        }\n      });\n    } else {\n      const newProduct = {\n        quantity,\n        product: productId\n      };\n      await Cart.findOneAndUpdate({\n        _id: cart._id\n      }, {\n        $addToSet: {\n          products: newProduct\n        }\n      });\n    }\n\n    res.status(200).send('Cart updated');\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}\n\nasync function handleGetRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n}\n\n;","map":{"version":3,"sources":["/Users/bishwas/Documents/workplace/SoftwareArchitecture/MERN_ECOMMERCE_APP/pages/api/cart.js"],"names":["mongoose","jwt","Cart","connectDb","ObjectId","Types","req","res","method","handleGetRequest","handlePutRequest","handleDeleteRequest","status","send","productId","query","headers","userId","verify","authorization","process","env","JWT_SECRET","cart","findOneAndUpdate","user","$pull","products","product","new","populate","path","model","json","error","console","quantity","body","findOne","productExists","some","doc","equals","_id","$inc","newProduct","$addToSet"],"mappings":"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","sourcesContent":["import mongoose from \"mongoose\";\nimport jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\"\nimport connectDb from \"../../utils/connectDb\";\nconst {ObjectId}=mongoose.Types\n\nconnectDb();\nexport default async(req,res)=>{\n    switch(req.method){\n        case \"GET\":\n            await handleGetRequest(req,res);\n            break;\n        case \"PUT\":\n            await handlePutRequest(req,res);\n            break;\n        case \"DELETE\":\n            await handleDeleteRequest(req,res);\n            break;\n        default:\n            res.status(405).send(`Mthod ${req.method} is not allowed`);\n    }\n}\nasync  function handleDeleteRequest (req, res)  {\n    const {productId}=req.query\n    if (!(\"authorization\" in req.headers)) {\n      return res.status(401).send(\"No authorization token\");\n    }\n    try {\n      const { userId } = jwt.verify(\n        req.headers.authorization,\n        process.env.JWT_SECRET);\n       const cart= await Cart.findOneAndUpdate(\n            {user:userId},\n            {$pull:{products:{product:productId}}},\n            {new:true}\n        ).populate({\n            path:'products.product',\n            model: 'Product'\n        })\n        res.status(200).json(cart.products);\n        \n      \n      \n    } catch (error) {\n      console.error(error);\n      res.status(403).send(\"Please login again\");\n    }\n  };\n\nasync function handlePutRequest(req,res){\n    const {quantity,productId}=req.body;\n    if (!(\"authorization\" in req.headers)) {\n        return res.status(401).send(\"No authorization token\");\n      }\n      try{\n        const { userId } = jwt.verify(\n            req.headers.authorization,\n            process.env.JWT_SECRET\n          );\n          const cart = await Cart.findOne({ user: userId });\n          // Check if product already exists in cart\n          const productExists = cart.products.some(doc =>\n            ObjectId(productId).equals(doc.product)\n          );\n     \n      if(productExists){\n        await Cart.findOneAndUpdate(\n            { _id: cart._id, \"products.product\": productId },\n            { $inc: { \"products.$.quantity\": quantity } }\n          );\n      }else{\n          const newProduct={quantity,product:productId}\n          await Cart.findOneAndUpdate(\n              { _id:cart._id},\n              {$addToSet:{products:newProduct}}\n          )\n          \n      }\n      res.status(200).send('Cart updated');\n      }\n      catch(error){\n        console.error(error);\n        res.status(403).send(\"Please login again\");\n\n      }\n\n\n}\n\nasync  function handleGetRequest (req, res)  {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).send(\"No authorization token\");\n  }\n  try {\n    const { userId } = jwt.verify(\n      req.headers.authorization,\n      process.env.JWT_SECRET);\n      \n    const cart = await Cart.findOne({ user: userId }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n    res.status(200).json(cart.products);\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Please login again\");\n  }\n};"]},"metadata":{},"sourceType":"module"}
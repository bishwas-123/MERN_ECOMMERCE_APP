{"ast":null,"code":"import Stripe from 'stripe';\nimport uuidv4 from 'uuid/v4';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport calculateCartTotal from '../../utils/calculateCartTotal';\nimport Order from '../../models/Order';\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY);\nconsole.log(\"STRIPE\" + stripe);\nexport default (async (req, res) => {\n  const {\n    paymentdata\n  } = req.body;\n  console.log('PAYMENT DATA BELOW');\n  console.log({\n    paymentdata\n  });\n  console.log({\n    paymentdata\n  });\n  console.log('PAYMENT DATA ABOVE');\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: 'products.product',\n      model: 'Product'\n    });\n    const {\n      cartTotal,\n      stripeTotal\n    } = calculateCartTotal(cart.products);\n    const prevCustomer = await stripe.customers.list({\n      email: paymentdata.email,\n      limit: 1\n    });\n    const isExistingCustomer = prevCustomer.length > 0;\n    let newCustomer;\n\n    if (!isExistingCustomer) {\n      newCustomer = await stripe.customers.create({\n        email: paymentdata.email,\n        source: paymentdata.id\n      });\n    }\n\n    const customer = isExistingCustomer && prevCustomer.data[0].id || newCustomer.id;\n    const charge = await stripe.charges.create({\n      currency: \"usd\",\n      amount: stripeTotal,\n      receipt_email: paymentdata.email,\n      customer,\n      description: `Checkout | ${paymentdata.email} | ${paymentdata.id}`\n    }, {\n      idempotency_key: uuidv4()\n    });\n    new Order({\n      user: userId,\n      email: paymentdata.email,\n      total: cartTotal,\n      products: cart.products\n    }).save();\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $set: {\n        products: []\n      }\n    });\n    res.status(200).send(\"Checkout successful\");\n  } catch (error) {\n    console.error(error);\n    res.status(403).send(\"Error Checkout products\");\n  }\n});","map":{"version":3,"sources":["/Users/bishwas/Documents/workplace/SoftwareArchitecture/MERN_ECOMMERCE_APP/pages/api/checkout.js"],"names":["Stripe","uuidv4","jwt","Cart","calculateCartTotal","Order","stripe","process","env","STRIPE_SECRET_KEY","console","log","req","res","paymentdata","body","userId","verify","headers","authorization","JWT_SECRET","cart","findOne","user","populate","path","model","cartTotal","stripeTotal","products","prevCustomer","customers","list","email","limit","isExistingCustomer","length","newCustomer","create","source","id","customer","data","charge","charges","currency","amount","receipt_email","description","idempotency_key","total","save","findOneAndUpdate","_id","$set","status","send","error"],"mappings":"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","sourcesContent":["import Stripe from 'stripe';\nimport uuidv4 from 'uuid/v4';\nimport jwt from 'jsonwebtoken';\nimport Cart from '../../models/Cart';\nimport calculateCartTotal from '../../utils/calculateCartTotal';\nimport Order from '../../models/Order';\nconst stripe=Stripe(process.env.STRIPE_SECRET_KEY);\nconsole.log(\"STRIPE\"+stripe);\nexport default async(req,res)=>{\n    const {paymentdata}=req.body\n    console.log('PAYMENT DATA BELOW')\n    console.log({paymentdata});\n    console.log({paymentdata});\n    console.log('PAYMENT DATA ABOVE')\n    try{\n        const {userId}=jwt.verify(req.headers.authorization,process.env.JWT_SECRET);\n       const cart=await  Cart.findOne({user:userId}).populate({\n            path:'products.product',\n            model:'Product'\n        })\n        const {cartTotal,stripeTotal}=calculateCartTotal(cart.products);\n        const prevCustomer=await stripe.customers.list({\n            email:paymentdata.email,\n            limit:1\n        })\n        const isExistingCustomer=prevCustomer.length>0;\n        let newCustomer;\n        if(!isExistingCustomer){\n            newCustomer=await stripe.customers.create({\n                email:paymentdata.email,\n                source:paymentdata.id\n            })\n\n        }\n        const customer=(isExistingCustomer && prevCustomer.data[0].id) || newCustomer.id;\n        const charge = await stripe.charges.create(\n            {\n              currency: \"usd\",\n              amount: stripeTotal,\n              receipt_email: paymentdata.email,\n              customer,\n              description: `Checkout | ${paymentdata.email} | ${paymentdata.id}`\n            },\n            {\n              idempotency_key: uuidv4()\n            }\n          );\n\n        new Order({\n            user:userId,\n            email:paymentdata.email,\n            total:cartTotal,\n            products:cart.products\n\n        }).save();\n        await Cart.findOneAndUpdate(\n            { _id: cart._id }, \n            { $set: { products: [] } })\n        res.status(200).send(\"Checkout successful\");\n    }\n    catch(error){\n        console.error(error);\n        res.status(403).send(\"Error Checkout products\");\n    }\n\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Product from '../../models/Product';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case 'GET':\n      await handleGetRequestForProduct(req, res);\n      break;\n\n    case 'DELETE':\n      await handleDeleteRequestForProduct(req, res);\n      break;\n\n    case 'POST':\n      await handlePostRequestForProduct(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Mthod ${req.method} is not allowed`);\n      break;\n  }\n});\n\nasync function handlePostRequestForProduct(req, res) {\n  const {\n    name,\n    price,\n    description,\n    mediaUrl\n  } = req.body;\n\n  try {\n    if (!name || !price || !description || !mediaUrl) return res.status(422).send('Some information is missing to add new product !');\n    const product = await new Product({\n      name,\n      price,\n      description,\n      mediaUrl\n    }).save();\n    res.status(201).json(product);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Server error in creating product !\");\n  }\n}\n\nasync function handleGetRequestForProduct(req, res) {\n  const {\n    _id\n  } = req.query;\n  const product = await Product.findOne({\n    _id\n  });\n  res.status(200).json(product);\n}\n\nasync function handleDeleteRequestForProduct(req, res) {\n  const {\n    _id\n  } = req.query;\n  const product = await Product.findOneAndDelete({\n    _id\n  });\n  res.status(204).json({});\n}","map":{"version":3,"sources":["/Users/bishwas/Documents/workplace/SoftwareArchitecture/MERN_ECOMMERCE_APP/pages/api/product.js"],"names":["Product","connectDb","req","res","method","handleGetRequestForProduct","handleDeleteRequestForProduct","handlePostRequestForProduct","status","send","name","price","description","mediaUrl","body","product","save","json","error","console","_id","query","findOne","findOneAndDelete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACAA,SAAS;AACT,gBAAe,OAAMC,GAAN,EAAUC,GAAV,KAAgB;AAC3B,UAAOD,GAAG,CAACE,MAAX;AACI,SAAK,KAAL;AACI,YAAMC,0BAA0B,CAACH,GAAD,EAAKC,GAAL,CAAhC;AACA;;AACJ,SAAK,QAAL;AACI,YAAMG,6BAA6B,CAACJ,GAAD,EAAKC,GAAL,CAAnC;AACA;;AACJ,SAAK,MAAL;AACI,YAAMI,2BAA2B,CAACL,GAAD,EAAKC,GAAL,CAAjC;AACA;;AACJ;AACIA,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,SAAQP,GAAG,CAACE,MAAO,iBAAzC;AACA;AAZR;AAcH,CAfD;;AAgBA,eAAeG,2BAAf,CAA2CL,GAA3C,EAA+CC,GAA/C,EAAmD;AAC/C,QAAM;AAACO,IAAAA,IAAD;AAAMC,IAAAA,KAAN;AAAYC,IAAAA,WAAZ;AAAwBC,IAAAA;AAAxB,MAAkCX,GAAG,CAACY,IAA5C;;AACA,MAAG;AACC,QAAG,CAACJ,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACC,WAApB,IAAmC,CAACC,QAAvC,EACA,OAAOV,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kDAArB,CAAP;AACA,UAAMM,OAAO,GAAC,MAAM,IAAIf,OAAJ,CAAY;AAChCU,MAAAA,IADgC;AAEhCC,MAAAA,KAFgC;AAGhCC,MAAAA,WAHgC;AAIhCC,MAAAA;AAJgC,KAAZ,EAKrBG,IALqB,EAApB;AAMJb,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBS,IAAhB,CAAqBF,OAArB;AACC,GAVD,CAWA,OAAMG,KAAN,EAAY;AACRC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAf,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oCAArB;AACH;AAEJ;;AACD,eAAeJ,0BAAf,CAA0CH,GAA1C,EAA8CC,GAA9C,EAAkD;AAC9C,QAAM;AAACiB,IAAAA;AAAD,MAAMlB,GAAG,CAACmB,KAAhB;AACA,QAAMN,OAAO,GAAC,MAAMf,OAAO,CAACsB,OAAR,CAAgB;AAACF,IAAAA;AAAD,GAAhB,CAApB;AACAjB,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBS,IAAhB,CAAqBF,OAArB;AACH;;AACD,eAAeT,6BAAf,CAA6CJ,GAA7C,EAAiDC,GAAjD,EAAqD;AACjD,QAAM;AAACiB,IAAAA;AAAD,MAAMlB,GAAG,CAACmB,KAAhB;AACA,QAAMN,OAAO,GAAC,MAAMf,OAAO,CAACuB,gBAAR,CAAyB;AAACH,IAAAA;AAAD,GAAzB,CAApB;AACAjB,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBS,IAAhB,CAAqB,EAArB;AACH","sourcesContent":["import Product from '../../models/Product';\nimport connectDb from '../../utils/connectDb';\nconnectDb();\nexport default async(req,res)=>{\n    switch(req.method){\n        case 'GET':\n            await handleGetRequestForProduct(req,res);\n            break;\n        case 'DELETE':\n            await handleDeleteRequestForProduct(req,res);\n            break;\n        case 'POST':\n            await handlePostRequestForProduct(req,res);\n            break;\n        default:\n            res.status(405).send(`Mthod ${req.method} is not allowed`);\n            break;\n    }\n}\nasync function handlePostRequestForProduct(req,res){\n    const {name,price,description,mediaUrl}=req.body\n    try{\n        if(!name || !price || !description || !mediaUrl)\n        return res.status(422).send('Some information is missing to add new product !');\n        const product=await new Product({\n        name,\n        price,\n        description,\n        mediaUrl\n    }).save();\n    res.status(201).json(product);\n    }\n    catch(error){\n        console.error(error);\n        res.status(500).send(\"Server error in creating product !\");\n    }\n   \n}\nasync function handleGetRequestForProduct(req,res){\n    const {_id}=req.query;\n    const product=await Product.findOne({_id});\n    res.status(200).json(product);\n}\nasync function handleDeleteRequestForProduct(req,res){\n    const {_id}=req.query;\n    const product=await Product.findOneAndDelete({_id});\n    res.status(204).json({});\n}"]},"metadata":{},"sourceType":"module"}